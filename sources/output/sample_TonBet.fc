forall X -> X __tact_not_null(X x) { throw_if(128, null?(x)); return x; }

global (int, slice, int) __tact_context;
global cell __tact_context_sys;

(int, slice, int) __tact_context_get() inline { return __tact_context; }

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, raw);
}

builder __tact_store_address(builder b, slice address) inline {
    b = b.store_slice(address);
    return b;
}

slice __tact_compute_contract_address(int chain, cell code, cell data) {
    var b = begin_cell();
    b = b.store_uint(0, 2);
    b = b.store_uint(3, 2);
    b = b.store_uint(0, 1);
    b = b.store_ref(code);
    b = b.store_ref(data);
    var hash = cell_hash(b.end_cell());
    var b2 = begin_cell();
    b2 = b2.store_uint(2, 2);
    b2 = b2.store_uint(0, 1);
    b2 = b2.store_int(chain, 8);
    b2 = b2.store_uint(hash, 256);
    return b2.end_cell().begin_parse();
}

int __tact_address_eq(slice a, slice b) inline {
    return equal_slice_bits(a, b);
}

cell __tact_dict_get_code(cell dict, int id) inline {
    var (data, ok) = udict_get_ref?(dict, 16, id);
    throw_unless(100, ok);
    return data;
}

(slice, ((slice))) __gen_read_ChangeOwner(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3067051791);
    var v'newOwner = sc_0~__tact_load_address();
    return (sc_0, (v'newOwner));
}

builder __gen_write_TopUp(builder build_0, (int, int) v) inline {
    var (v'valueA, v'valueB) = v;
    build_0 = store_uint(build_0, 2882324798, 32);
    build_0 = store_coins(build_0, v'valueA);
    build_0 = store_coins(build_0, v'valueB);
    return build_0;
}

cell __gen_writecell_TopUp((int, int) v) inline {
    return __gen_write_TopUp(begin_cell(), v).end_cell();
}

builder __gen_write_Withdraw(builder build_0, (int, int) v) inline {
    var (v'wonA, v'wonB) = v;
    build_0 = store_uint(build_0, 1286094280, 32);
    build_0 = store_int(build_0, v'wonA, 1);
    build_0 = store_int(build_0, v'wonB, 1);
    return build_0;
}

cell __gen_writecell_Withdraw((int, int) v) inline {
    return __gen_write_Withdraw(begin_cell(), v).end_cell();
}

(slice, ((slice, int, int))) __gen_read_WithdrawResponse(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3484866422);
    var v'owner = sc_0~__tact_load_address();
    var v'valueA = sc_0~load_coins();
    var v'valueB = sc_0~load_coins();
    return (sc_0, (v'owner, v'valueA, v'valueB));
}

builder __gen_write_BetHolder(builder build_0, (slice, slice, int, int, int) v) inline {
    var (v'owner, v'master, v'balanceA, v'balanceB, v'completed) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'master);
    build_0 = store_coins(build_0, v'balanceA);
    build_0 = store_coins(build_0, v'balanceB);
    build_0 = store_int(build_0, v'completed, 1);
    return build_0;
}

builder __gen_write_TonBet(builder build_0, (slice, int, int, int, int, int, int, int, int) v) inline {
    var (v'owner, v'balanceA, v'balanceB, v'minBet, v'fee, v'stopped, v'completed, v'teamAwon, v'wonPPT) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = store_coins(build_0, v'balanceA);
    build_0 = store_coins(build_0, v'balanceB);
    build_0 = store_coins(build_0, v'minBet);
    build_0 = store_uint(build_0, v'fee, 8);
    build_0 = store_int(build_0, v'stopped, 1);
    build_0 = store_int(build_0, v'completed, 1);
    build_0 = store_int(build_0, v'teamAwon, 1);
    build_0 = store_int(build_0, v'wonPPT, 257);
    return build_0;
}

(slice, ((slice, int, int, int, int, int, int, int, int))) __gen_read_TonBet(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'balanceA = sc_0~load_coins();
    var v'balanceB = sc_0~load_coins();
    var v'minBet = sc_0~load_coins();
    var v'fee = sc_0~load_uint(8);
    var v'stopped = sc_0~load_int(1);
    var v'completed = sc_0~load_int(1);
    var v'teamAwon = sc_0~load_int(1);
    var v'wonPPT = sc_0~load_int(257);
    return (sc_0, (v'owner, v'balanceA, v'balanceB, v'minBet, v'fee, v'stopped, v'completed, v'teamAwon, v'wonPPT));
}

_ __gen_Context_get_sender((int, slice, int) v) inline {
    var (v'bounced, v'sender, v'value) = v;
    return v'sender;
}

(slice, int, int, int, int, int, int, int, int) __gen_load_TonBet() inline {
    slice sc = get_data().begin_parse();
    __tact_context_sys = sc~load_ref();
    return sc~__gen_read_TonBet();
}

() __gen_store_TonBet((slice, int, int, int, int, int, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = __gen_write_TonBet(b, v);
    set_data(b.end_cell());
}

builder storeBool(builder s, int value) impure inline {
    if (value) {
        return store_int(s, (- 1), 1);
    } else {
        return store_int(s, 0, 1);
    }
}

() require(int condition) impure inline {
    throw_unless(131, condition);
}

() send((int, slice, int, int, cell, cell, cell) params) impure inline {
    var ((params'bounce, params'to, params'value, params'mode, params'body, params'code, params'data)) = params;
    builder b = begin_cell();
    b = store_int(b, 1, 2);
    b = store_int(b, params'bounce, 1);
    b = store_int(b, 0, 3);
    b = __tact_store_address(b, params'to);
    b = store_coins(b, params'value);
    b = store_int(b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (((~ null?(params'code)) | (~ null?(params'data)))) {
        b = storeBool(b, true);
        builder bc = begin_cell();
        bc = storeBool(bc, false);
        bc = storeBool(bc, false);
        if ((~ null?(params'code))) {
            bc = storeBool(bc, true);
            bc = store_ref(bc, params'code);
        } else {
            bc = storeBool(bc, false);
        }
        if ((~ null?(params'data))) {
            bc = storeBool(bc, true);
            bc = store_ref(bc, params'data);
        } else {
            bc = storeBool(bc, false);
        }
        bc = storeBool(bc, false);
        b = storeBool(b, true);
        b = store_ref(b, end_cell(bc));
    } else {
        b = storeBool(b, false);
    }
    cell body = params'body;
    if ((~ null?(body))) {
        b = store_int(b, true, 1);
        b = store_ref(b, __tact_not_null(body));
    } else {
        b = store_int(b, false, 1);
    }
    cell c = end_cell(b);
    send_raw_message(c, params'mode);
}

() simpleSend(slice to, int value, int mode) impure inline {
    send((false, to, value, mode, null(), null(), null()));
}

() simpleReply(int value, int mode) impure inline {
    var (ctx'bounced, ctx'sender, ctx'value) = __tact_context_get();
    simpleSend(ctx'sender, value, mode);
}

cell __gen_BetHolder_init(cell sys', slice master, slice owner) inline {
    var ((self'owner, self'master, self'balanceA, self'balanceB, self'completed)) = (null(), null(), null(), null(), null());
    self'owner = owner;
    self'master = master;
    self'balanceA = 0;
    self'balanceB = 0;
    self'completed = false;
    var b' = begin_cell();
    b' = b'.store_ref(sys');
    b' = __gen_write_BetHolder(b', (self'owner, self'master, self'balanceA, self'balanceB, self'completed));
    return b'.end_cell();
}

(cell, cell) __gen_BetHolder_init_child(cell sys', slice master, slice owner) inline {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell mine = __tact_dict_get_code(source, 63785);
    cell contracts = new_dict();
    cell sys = begin_cell().store_dict(contracts).end_cell();
    return (mine, __gen_BetHolder_init(sys, master, owner));
}

cell __gen_TonBet_init(cell sys', slice owner, int minBet, int fee) inline {
    var ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)) = (null(), null(), null(), null(), null(), null(), null(), null(), null());
    self'owner = owner;
    self'balanceA = 0;
    self'balanceB = 0;
    self'minBet = minBet;
    self'fee = fee;
    self'stopped = false;
    self'completed = false;
    self'teamAwon = false;
    self'wonPPT = 0;
    var b' = begin_cell();
    b' = b'.store_ref(sys');
    b' = __gen_write_TonBet(b', (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT));
    return b'.end_cell();
}

((slice, int, int, int, int, int, int, int, int), ()) __gen_TonBet_requireNotStopped((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)) = self;
    require((~ self'stopped));
    return ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT), ());
}

((slice, int, int, int, int, int, int, int, int), ()) __gen_TonBet_acceptBet((slice, int, int, int, int, int, int, int, int) self, int isA) impure inline {
    var ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)) = self;
    (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)~__gen_TonBet_requireNotStopped();
    var (ctx'bounced, ctx'sender, ctx'value) = __tact_context_get();
    require((ctx'value > self'minBet));
    int workingValue = (ctx'value - 1000000000);
    int value = (workingValue - ((workingValue * self'fee) / 100));
    int topUpA = 0;
    int topUpB = 0;
    if (isA) {
        self'balanceA = (self'balanceA + value);
        topUpA = value;
    } else {
        self'balanceB = (self'balanceB + value);
        topUpB = value;
    }
    var (holderInit'code, holderInit'data) = __gen_BetHolder_init_child(__tact_context_sys, my_address(), ctx'sender);
    slice holderAddress = __tact_compute_contract_address(0, holderInit'code, holderInit'data);
    send((false, holderAddress, 1000000000, (64 + 2), __gen_writecell_TopUp((topUpA, topUpB)), null(), null()));
    return ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT), ());
}

((slice, int, int, int, int, int, int, int, int), ()) __gen_TonBet_requireOwner((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)) = self;
    throw_unless(132, __tact_address_eq(__gen_Context_get_sender(__tact_context_get()), self'owner));
    return ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT), ());
}

((slice, int, int, int, int, int, int, int, int), ()) __gen_TonBet_teamWon((slice, int, int, int, int, int, int, int, int) self, int isA) impure inline {
    var ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)) = self;
    var (ctx'bounced, ctx'sender, ctx'value) = __tact_context_get();
    (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)~__gen_TonBet_requireOwner();
    require(self'stopped);
    require((~ self'completed));
    int total = (self'balanceA + self'balanceB);
    int wonBalance = 0;
    int lostBalance = 0;
    if (isA) {
        wonBalance = self'balanceA;
        lostBalance = self'balanceB;
    } else {
        wonBalance = self'balanceB;
        lostBalance = self'balanceA;
    }
    int wonPPT = 0;
    if ((total > 0)) {
        wonPPT = ((total * 1000000000000) / wonBalance);
    }
    self'wonPPT = wonPPT;
    self'teamAwon = isA;
    self'completed = true;
    simpleReply(0, (64 + 2));
    return ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT), ());
}

((slice, int, int, int, int, int, int, int, int), int) __gen_TonBet_resolveWonAmount((slice, int, int, int, int, int, int, int, int) self, int valueA, int valueB) impure inline {
    var ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)) = self;
    int value = 0;
    if (self'completed) {
        if ((self'teamAwon & (valueA > 0))) {
            value = ((valueA * self'wonPPT) / 1000000000000);
        } elseif (((~ self'teamAwon) & (valueB > 0))) {
            value = ((valueB * self'wonPPT) / 1000000000000);
        }
    }
    return ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT), value);
}

int __gen_TonBet_completed((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)) = self;
    return self'completed;
}

_ __gen_get_completed() method_id(79554) {
    var self = __gen_load_TonBet();
    var res = __gen_TonBet_completed(self);
    return res;
}

int __gen_TonBet_teamAWon((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)) = self;
    return self'teamAwon;
}

_ __gen_get_teamAWon() method_id(66248) {
    var self = __gen_load_TonBet();
    var res = __gen_TonBet_teamAWon(self);
    return res;
}

int __gen_TonBet_wonPPT((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)) = self;
    return self'wonPPT;
}

_ __gen_get_wonPPT() method_id(82032) {
    var self = __gen_load_TonBet();
    var res = __gen_TonBet_wonPPT(self);
    return res;
}

int __gen_TonBet_won((slice, int, int, int, int, int, int, int, int) self, int valueA, int valueB) impure inline {
    var ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)) = self;
    require((valueA >= 0));
    require((valueB >= 0));
    return (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)~__gen_TonBet_resolveWonAmount(valueA, valueB);
}

_ __gen_get_won(int valueA,int valueB) method_id(117732) {
    var self = __gen_load_TonBet();
    var res = __gen_TonBet_won(self, valueA, valueB);
    return res;
}

int __gen_TonBet_minBet((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)) = self;
    return self'minBet;
}

_ __gen_get_minBet() method_id(123506) {
    var self = __gen_load_TonBet();
    var res = __gen_TonBet_minBet(self);
    return res;
}

int __gen_TonBet_fee((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)) = self;
    return self'fee;
}

_ __gen_get_fee() method_id(123159) {
    var self = __gen_load_TonBet();
    var res = __gen_TonBet_fee(self);
    return res;
}

int __gen_TonBet_balanceA((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)) = self;
    return self'balanceA;
}

_ __gen_get_balanceA() method_id(97178) {
    var self = __gen_load_TonBet();
    var res = __gen_TonBet_balanceA(self);
    return res;
}

int __gen_TonBet_balanceB((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)) = self;
    return self'balanceB;
}

_ __gen_get_balanceB() method_id(84985) {
    var self = __gen_load_TonBet();
    var res = __gen_TonBet_balanceB(self);
    return res;
}

slice __gen_TonBet_participantAddress((slice, int, int, int, int, int, int, int, int) self, slice owner) impure inline {
    var ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)) = self;
    var (holderInit'code, holderInit'data) = __gen_BetHolder_init_child(__tact_context_sys, my_address(), owner);
    return __tact_compute_contract_address(0, holderInit'code, holderInit'data);
}

_ __gen_get_participantAddress(slice owner) method_id(105758) {
    var self = __gen_load_TonBet();
    var res = __gen_TonBet_participantAddress(self, owner);
    return res;
}

slice __gen_TonBet_owner((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)) = self;
    return self'owner;
}

_ __gen_get_owner() method_id(83229) {
    var self = __gen_load_TonBet();
    var res = __gen_TonBet_owner(self);
    return res;
}

int __gen_TonBet_stopped((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)) = self;
    return self'stopped;
}

_ __gen_get_stopped() method_id(74107) {
    var self = __gen_load_TonBet();
    var res = __gen_TonBet_stopped(self);
    return res;
}

((slice, int, int, int, int, int, int, int, int), ()) __gen_TonBet_receive_comment_f42180616e67f54f134d14dfcf9ce09a4a0c44b773f6c444d162296df65759b5((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT) = self;
    (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)~__gen_TonBet_acceptBet(true);
    return ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT), ());
}

((slice, int, int, int, int, int, int, int, int), ()) __gen_TonBet_receive_comment_b387e0fdbbcb0d5e43a359a67ddf2989989956e86406284e3ad5aea2d85bad67((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT) = self;
    (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)~__gen_TonBet_acceptBet(false);
    return ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT), ());
}

((slice, int, int, int, int, int, int, int, int), ()) __gen_TonBet_receive_comment_250b76e2b9576fc6b4c45129483006b0003a0c39b6f7ae413d177f4e3479dbca((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT) = self;
    var (ctx'bounced, ctx'sender, ctx'value) = __tact_context_get();
    require(self'completed);
    require((ctx'value > 1000000000));
    var (holderInit'code, holderInit'data) = __gen_BetHolder_init_child(__tact_context_sys, my_address(), ctx'sender);
    slice holderAddress = __tact_compute_contract_address(0, holderInit'code, holderInit'data);
    send((false, holderAddress, 0, (64 + 2), __gen_writecell_Withdraw((self'teamAwon, (~ self'teamAwon))), null(), null()));
    return ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT), ());
}

(((slice, int, int, int, int, int, int, int, int)), ()) __gen_TonBet_receive_WithdrawResponse((slice, int, int, int, int, int, int, int, int) self, (slice, int, int) msg) impure inline {
    var (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT) = self;
    var (msg'owner, msg'valueA, msg'valueB) = msg;
    var (ctx'bounced, ctx'sender, ctx'value) = __tact_context_get();
    var (holderInit'code, holderInit'data) = __gen_BetHolder_init_child(__tact_context_sys, my_address(), msg'owner);
    slice holderAddress = __tact_compute_contract_address(0, holderInit'code, holderInit'data);
    require(__tact_address_eq(ctx'sender, holderAddress));
    int value = (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)~__gen_TonBet_resolveWonAmount(msg'valueA, msg'valueB);
    send((false, msg'owner, value, (64 + 2), null(), null(), null()));
    return ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT), ());
}

((slice, int, int, int, int, int, int, int, int), ()) __gen_TonBet_receive_comment_cdc618613e782bbde2b8ac36290732806bf69621cebb9fc506b045ba4d0b4466((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT) = self;
    (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)~__gen_TonBet_requireOwner();
    int locked = (self'balanceA + self'balanceB);
    if ((locked > 0)) {
        raw_reserve(locked, 0);
    }
    simpleReply(0, (128 + 2));
    return ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT), ());
}

((slice, int, int, int, int, int, int, int, int), ()) __gen_TonBet_receive_comment_57148b01be381e215dc587724cf394c39d04918f69160d08f48c0cc5860c9a9f((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT) = self;
    (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)~__gen_TonBet_teamWon(true);
    return ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT), ());
}

((slice, int, int, int, int, int, int, int, int), ()) __gen_TonBet_receive_comment_05daf813b58fba079b0baa08e353803113add476eb2df5f522b70faf2fffb310((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT) = self;
    (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)~__gen_TonBet_teamWon(false);
    return ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT), ());
}

(((slice, int, int, int, int, int, int, int, int)), ()) __gen_TonBet_receive((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT) = self;
    require(false);
    return ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT), ());
}

(((slice, int, int, int, int, int, int, int, int)), ()) __gen_TonBet_receive_ChangeOwner((slice, int, int, int, int, int, int, int, int) self, (slice) msg) impure inline {
    var (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT) = self;
    var (msg'newOwner) = msg;
    (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)~__gen_TonBet_requireOwner();
    self'owner = msg'newOwner;
    return ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT), ());
}

((slice, int, int, int, int, int, int, int, int), ()) __gen_TonBet_receive_comment_6f3575ac1ff681c8cbc50a4cc1ca6f4687f9da770212d6df8cfe84c22d861d9f((slice, int, int, int, int, int, int, int, int) self) impure inline {
    var (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT) = self;
    (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)~__gen_TonBet_requireOwner();
    (self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT)~__gen_TonBet_requireNotStopped();
    self'stopped = true;
    return ((self'owner, self'balanceA, self'balanceB, self'minBet, self'fee, self'stopped, self'completed, self'teamAwon, self'wonPPT), ());
}


() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounced, msg_sender_addr, msg_value);
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return ();
    }
    
    ;; Receive WithdrawResponse message
    if (op == 3484866422) {
        var self = __gen_load_TonBet();
        var msg = in_msg~__gen_read_WithdrawResponse();
        self~__gen_TonBet_receive_WithdrawResponse(msg);
        __gen_store_TonBet(self);
        return ();
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        var self = __gen_load_TonBet();
        self~__gen_TonBet_receive();
        __gen_store_TonBet(self);
        return ();
    }
    
    ;; Receive ChangeOwner message
    if (op == 3067051791) {
        var self = __gen_load_TonBet();
        var msg = in_msg~__gen_read_ChangeOwner();
        self~__gen_TonBet_receive_ChangeOwner(msg);
        __gen_store_TonBet(self);
        return ();
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Bet A" message
        if (text_op == 0xf42180616e67f54f134d14dfcf9ce09a4a0c44b773f6c444d162296df65759b5) {
            var self = __gen_load_TonBet();
            self~__gen_TonBet_receive_comment_f42180616e67f54f134d14dfcf9ce09a4a0c44b773f6c444d162296df65759b5();
            __gen_store_TonBet(self);
            return ();
        }
        
        ;; Receive "Bet B" message
        if (text_op == 0xb387e0fdbbcb0d5e43a359a67ddf2989989956e86406284e3ad5aea2d85bad67) {
            var self = __gen_load_TonBet();
            self~__gen_TonBet_receive_comment_b387e0fdbbcb0d5e43a359a67ddf2989989956e86406284e3ad5aea2d85bad67();
            __gen_store_TonBet(self);
            return ();
        }
        
        ;; Receive "Withdraw" message
        if (text_op == 0x250b76e2b9576fc6b4c45129483006b0003a0c39b6f7ae413d177f4e3479dbca) {
            var self = __gen_load_TonBet();
            self~__gen_TonBet_receive_comment_250b76e2b9576fc6b4c45129483006b0003a0c39b6f7ae413d177f4e3479dbca();
            __gen_store_TonBet(self);
            return ();
        }
        
        ;; Receive "Profit" message
        if (text_op == 0xcdc618613e782bbde2b8ac36290732806bf69621cebb9fc506b045ba4d0b4466) {
            var self = __gen_load_TonBet();
            self~__gen_TonBet_receive_comment_cdc618613e782bbde2b8ac36290732806bf69621cebb9fc506b045ba4d0b4466();
            __gen_store_TonBet(self);
            return ();
        }
        
        ;; Receive "Team A won" message
        if (text_op == 0x57148b01be381e215dc587724cf394c39d04918f69160d08f48c0cc5860c9a9f) {
            var self = __gen_load_TonBet();
            self~__gen_TonBet_receive_comment_57148b01be381e215dc587724cf394c39d04918f69160d08f48c0cc5860c9a9f();
            __gen_store_TonBet(self);
            return ();
        }
        
        ;; Receive "Team B won" message
        if (text_op == 0x05daf813b58fba079b0baa08e353803113add476eb2df5f522b70faf2fffb310) {
            var self = __gen_load_TonBet();
            self~__gen_TonBet_receive_comment_05daf813b58fba079b0baa08e353803113add476eb2df5f522b70faf2fffb310();
            __gen_store_TonBet(self);
            return ();
        }
        
        ;; Receive "stop" message
        if (text_op == 0x6f3575ac1ff681c8cbc50a4cc1ca6f4687f9da770212d6df8cfe84c22d861d9f) {
            var self = __gen_load_TonBet();
            self~__gen_TonBet_receive_comment_6f3575ac1ff681c8cbc50a4cc1ca6f4687f9da770212d6df8cfe84c22d861d9f();
            __gen_store_TonBet(self);
            return ();
        }
    }
    
    throw(130);
}

cell init_TonBet(cell sys', slice owner, int minBet, int fee) method_id {
    return __gen_TonBet_init(sys', owner, minBet, fee);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.ownable.transferable"H >> 128,
        "org.ton.ownable"H >> 128,
        "org.ton.stoppable"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmNPPMxsdwtx1uGK2XtW93gMow1DBFwe54tFEvEkukoWJN";
}